class Solution {
    public int trap(int[] height) {
        
    int max_l = 0, max_r = 0, l = 0, r = height.length - 1, res = 0;

    while (l <= r) {
        if (max_l < max_r) {
            res += Math.max(max_l - height[l], 0);
            max_l = Math.max(max_l, height[l]);
            l += 1;
        } else {
            res += Math.max(max_r - height[r], 0);
            max_r = Math.max(max_r, height[r]);
            r -= 1;
        }
    }

    return res;
}
        
    }


/*
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

<a href="https://leetcode.com"><img src="https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png" alt="rainwater trap image"></a>


Ex 1:
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

Ex 2:
Input: height = [4,2,0,3,2,5]
Output: 9



*/
